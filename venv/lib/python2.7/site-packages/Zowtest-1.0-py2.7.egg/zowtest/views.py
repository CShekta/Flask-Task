from FlaskTask import app
from flask import make_response
from flask import redirect
from flask import render_template
import random

CHARSETS = ['ISO-8859-1', 'ISO-8859-2', 'ISO-8859-3', 'ISO-8859-4', 'ISO-8859-5', 'ISO-8859-6', 'ISO-8859-7',
            'ISO-8859-8', 'ISO-8859-9', 'ISO-8859-10', 'ISO-8859-11', 'ISO-8859-13', 'ISO-8859-15', 'ISO-8859-16',
            'windows-1250', 'windows-1251', 'windows-1252', 'windows-1253', 'windows-1254', 'windows-1255',
            'windows-1256', 'windows-1257', 'windows-1258', 'UTF-7', 'shift_jis']

EXAMPLE_STATUS_CODES = [100, 101, 200, 201, 202, 203, 204, 205, 206, 207, 208, 300, 301, 302, 303, 304, 305, 306, 307,
                        308, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
                        421, 422, 423, 424, 428, 444, 449, 450, 451, 495, 496, 497, 498, 499, 500, 501, 502, 502, 504,
                        505, 506, 507, 508, 509, 510, 511, 520, 521, 522, 523, 524, 525, 526] + random.sample(xrange(999), 10)


@app.route('/')
@app.route('/index')
def index():
    return render_template('index.html',
                           title='Home',
                           charset_list=CHARSETS,
                           status_list=EXAMPLE_STATUS_CODES)


@app.route('/headers/timeout_truncated')
def truncated():
    response = make_response(render_template('/headers/truncated.html'))
    response.headers['Content-Length'] = 1000
    return response


@app.route('/status_codes/<code>')
def status_codes(code):
    return render_template('status_code.html',
                           title='Status Codes',
                           ), code


@app.route('/encoding/<charset>')
def encoding(charset):
    response = make_response(render_template('/encoding/encoding.html',
                             title='Encoding',
                             charset=charset).encode(charset))
    response.headers['Content-Type'] = 'text/html; charset=' + str(charset)
    return response


@app.route('/xrobots/<tag>')
def xrobots(tag):
    response = make_response(render_template('/robots/xrobots.html',
                             title='XRobot Tags',
                             tag=tag))
    response.headers['X-Robots-Tag'] = tag
    return response


@app.route('/robots/<tag>')
def robots(tag):
    return render_template('/robots/robots.html',
                           title="Robot Tags",
                           tag=tag)


@app.route('/links/<issue>')
def links(issue):
    return render_template('/links/' + str(issue) + '.html')


@app.route('/head/<issue>')
def head(issue):
    return render_template('/head/' + str(issue) + '.html')


@app.route('/redirects/missing_location')
def missing_location():
    return redirect("", code=301)


@app.route('/redirects/<issue>')
def redirects(issue):
    response = make_response(render_template('/redirects/' + str(issue) + '.html'), 301)
    response.status_code = 301
    response.headers['Location'] = str(issue)
    return response


@app.route('/encoding/type/<encoding_type>')
def compression(encoding_type):
    response = make_response(render_template('/encoding/compression.html',
                                             title=encoding_type))
    response.headers['Content-Encoding'] = encoding_type
    return response


@app.route('/headers/refresh')
def refresh():
    response = make_response(render_template('/headers/refresh.html',
                                             title='refresh'))
    response.headers['Refresh:'] = '0; url=http://www.example.org/fresh-as-a-summer-breeze'
    return response


@app.route('/empty')
def empty():
    return render_template('/empty.html')
